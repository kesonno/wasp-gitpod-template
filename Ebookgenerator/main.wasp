app Ebookgenerator {
  wasp: {
    version: "^0.11.1"
  },
  title: "Ebookgenerator",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx"
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  }
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
    id       Int    @id @default(autoincrement())
    username String @unique
    password String
    cart     Cart[]
psl=}

entity Word {=psl
    id          Int    @id @default(autoincrement())
    description String
    Cart        Cart?  @relation(fields: [cartId], references: [id])
    cartId      Int?
psl=}

entity Cart {=psl
    id          Int    @id @default(autoincrement())
    title       String
    description String
    words       Word[]
    user        User   @relation(fields: [userId], references: [id])
    userId      Int
psl=}

action addToCart {
  fn: import { addToCart } from "@server/actions.js",
  entities: [User, Word, Cart]
}

action createEbook {
  fn: import { createEbook } from "@server/actions.js",
  entities: [User, Word, Cart]
}

query getCart {
  fn: import { getCart } from "@server/queries.js",
  entities: [User, Cart]
}

query getWords {
  fn: import { getWords } from "@server/queries.js",
  entities: [Word]
}

route CartRoute { path: "/cart", to: CartPage }
page CartPage {
  component: import { Cart } from "@client/pages/Cart.jsx",
  authRequired: true
}

route WordsRoute { path: "/", to: WordsPage }
page WordsPage {
  component: import { Words } from "@client/pages/Words.jsx",
  authRequired: true
}
